package com.intelligence.business.product.controller;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.intelligence.business.base.service.ICodeNameService;
import com.intelligence.business.product.service.IProductService;
import com.intelligence.common.base.BaseController;
import com.intelligence.common.cache.MemcacheTools;
import com.intelligence.common.constant.StringCon;
import com.intelligence.common.exception.ErrorCode;
import com.intelligence.common.exception.PowerException;
import com.intelligence.common.log.LogUtils;
import com.intelligence.common.utils.NumUtils;

@Controller
@RequestMapping(value = "/product")
public class ProductController extends BaseController {

	/**
	 * 日志
	 */
	public final static Logger logger = LoggerFactory
			.getLogger(ProductController.class);

	/**
	 * 商品业务层
	 */
	@Resource
	private IProductService iProductService;

	@Resource
	private ICodeNameService iCodeNameService;
	
	@Resource
	private MemcacheTools memcacheTools;
	
	@RequestMapping(value = "/test", method = RequestMethod.GET)
	public void test(HttpServletRequest request, HttpServletResponse response) throws PowerException {
		long pre = System.currentTimeMillis();
		for(int i = 1; i < 10000; i++) {
//			iCodeNameService.mapBrandCodeName(1);
//			iCodeNameService.mapSupplierCodeName(2);
//			iCodeNameService.mapCountryCodeName(1);
//			iCodeNameService.mapProductTypeCodeName(1);
			iCodeNameService.mapCategoryCodeName(1);
		}
		this.sendResult(response, System.currentTimeMillis() - pre);
	}
	
	@RequestMapping(value = "/add", method = RequestMethod.POST)
	public void addProduct(HttpServletRequest request, HttpServletResponse response) throws PowerException {
		try {
			// 获取参数
			HashMap<String, Object> params = this.getMapParams(request,
					response);
			// 记录日志
			logger.info(LogUtils.commonFormat("新增一条产品接口入参", params,
					"/product/add", "post"));
			// 校验入参
			String paramMsg = StringCon.EMPTY_STR.getValue();
			if (!NumUtils.isNum(params.get("productType"))) {
				// 商品类型
				paramMsg = "productType";
			} else if (null == params.get("productName")) {
				// 商品名称
				paramMsg = "productName";
			} else if (null == params.get("unit")) {
				// 单位
				paramMsg = "unit";
			} else if (null == params.get("headImg")) {
				// 头图
				paramMsg = "headImg";
			} else if (!NumUtils.isNum(params.get("supplierId"))) {
				// 供应商ID
				paramMsg = "supplierId";
			} else if (!NumUtils.isNum(params.get("countryId"))) {
				// 国家ID
				paramMsg = "countryId";
			} else if (!NumUtils.isNum(params.get("brandId"))) {
				// 品牌ID
				paramMsg = "brandId";
			} else if (!NumUtils.isDouble(params.get("weight"))) {
				// 重量
				paramMsg = "weight";
			} else if (0 != NumUtils.toNum(params.get("checkFlag"))
					&& 1 != NumUtils.toNum(params.get("checkFlag"))) {
				// 审核标记
				paramMsg = "checkFlag";
			} else if (0 != NumUtils.toNum(params.get("masterFlag"))
					&& 1 != NumUtils.toNum(params.get("masterFlag"))) {
				// 主从标记
				paramMsg = "masterFlag";
			} else if (!NumUtils.isNum(params.get("sellLimit"))) {
				// 售卖限制
				paramMsg = "sellLimit";
			} else if (!NumUtils.isNum(params.get("uniPurchasePrice"))) {
				// 统一采购价
				paramMsg = "uniPurchasePrice";
			} else if (!NumUtils.isNum(params.get("uniReferPrice"))) {
				// 统一关联价
				paramMsg = "uniReferPrice";
			} else if (null != params.get("rateBal")
					&& !NumUtils.isNum(params.get("rateBal"))) {
				// 汇率差
				paramMsg = "rateBal";
			} else if (null != params.get("priceBal")
					&& !NumUtils.isNum(params.get("priceBal"))) {
				// 价格差
				paramMsg = "priceBal";
			} else if (0 != NumUtils.toNum(params.get("groupFlag"))
					&& 1 != NumUtils.toNum(params.get("groupFlag"))) {
				// 组合标记
				paramMsg = "groupFlag";
			} else if (0 != NumUtils.toNum(params.get("isTop"))
					&& 1 != NumUtils.toNum(params.get("isTop"))) {
				// 是否置顶
				paramMsg = "isTop";
			}

			if (!StringCon.EMPTY_STR.getValue().equals(paramMsg)) {
				// 返回结果，参数错误
				this.sendResult(response, null, false, paramMsg
						+ ErrorCode.PARAMS_FAIL.getErrorMessage(),
						ErrorCode.PARAMS_FAIL.getErrorCode());
			} else {
				// 新增商品
				Integer productId = iProductService.addProduct(params);
				// 返回结果
				this.sendResult(response, productId);
			}

		} catch (PowerException e) {
			if (logger.isDebugEnabled()) {
				e.printStackTrace();
			}
			this.sendResult(response, null, false, e.getErrorMsg(),
					e.getErrorCode());
		}
	}

	/**
	 *  商品详情查看
	 * @param productId
	 * @param request
	 * @param response
	 */
	@RequestMapping(value = "/select", method = RequestMethod.GET)
	public void selectProduct(@RequestParam(value = "productId") int productId,
			HttpServletRequest request, HttpServletResponse response) throws PowerException{
		HashMap<String, Object> data = null;
		try {
			// 记录日志
			logger.info(LogUtils.commonFormat("商品详情查看", productId,
					"/product/select", "get"));
			// 检验入参
			String paramMsg = StringCon.EMPTY_STR.getValue();
			System.out.println(NumUtils.isNum(productId));
			if (NumUtils.isNum(productId)) {
				// 商品id
				paramMsg = Integer.toString(productId);
			}
			if (StringCon.EMPTY_STR.getValue().equals(paramMsg)) {
				// 返回结果，参数错误
				this.sendResult(response, null, false, paramMsg
						+ ErrorCode.PARAMS_FAIL.getErrorMessage(),
						ErrorCode.PARAMS_FAIL.getErrorCode());
			} else {
				// 查询商品
				data = iProductService.selectProduct(productId);
				// 返回结果
				this.sendResult(response, data);

			}
		} catch (PowerException e) {
			// TODO: handle exception
			throw e;
		}

	}

	
	/**
	 * 根据条件查询商品列表
	 * @param request
	 * @param response
	 * @throws IOException
	 * @throws PowerException
	 * @author zhengyf
	 */
    @RequestMapping(value = "/querybycondition", method = RequestMethod.GET)
    public void queryByCondition(HttpServletRequest request,
	    HttpServletResponse response) throws IOException, PowerException {
	try {
	    // 获取参数
	    HashMap<String, Object> params = this.getMapParams(request, response);
	    // 记录日志
	    logger.info(LogUtils.commonFormat("根据条件查询商品接口", params, "/product/querybycondition",
	    	"get"));
	    // 校验入参
	    String paramMsg = StringCon.EMPTY_STR.getValue();
		if (!NumUtils.isNum(params.get("start"))) {
			// 分页起始
			paramMsg = "start";
		} else if (!NumUtils.isNum(params.get("limit"))) {
			// 查询条数
			paramMsg = "limit";
		} else if (null == params.get("productName") && //商品名
			   null == params.get("productNameEn") && //商品英文名称
			   null == params.get("countyId") && // 国家ID 
			   null == params.get("brandName") && //品牌名称
		           null == params.get("depotId") && //仓库ID
			   null == params.get("categoryName") && //分类名称
			   null == params.get("productTypeName") && //品类名称
			   null == params.get("checkFlag") //是否上线
			   ){
		        // 查询条件为空
		        paramMsg = "emptyqueryconditon";
		} 
		
		
	    if (!StringCon.EMPTY_STR.getValue().equals(paramMsg)) {
		this.sendResult(response, null, false, paramMsg	+ ErrorCode.PARAMS_FAIL.getErrorMessage(),ErrorCode.PARAMS_FAIL.getErrorCode());
	    } else {
		List<HashMap<String, Object>> productList = iProductService.queryByCondition(params);
		// 返回结果
		this.sendResult(response, productList);
	    }
	} catch (PowerException e) {
	    if (logger.isDebugEnabled()) {
		e.printStackTrace();
	    }
	    this.sendResult(response, null, false, e.getErrorMsg(),
		    e.getErrorCode());
	}

    }
    
    @RequestMapping(value="/testCode",method = RequestMethod.GET)
    public void testCodeNameService(HttpServletRequest request,
	    HttpServletResponse response) throws IOException, PowerException {
	
    }
    
	
	
}
