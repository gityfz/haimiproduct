<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd   
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd  
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd  
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">
     
	<!-- Spring MVC配置 -->
    <context:annotation-config />
	
	<!-- 默认的注解映射的支持 -->
	<mvc:annotation-driven />
	
	<!-- 自动扫描的包名，只扫描controller层 -->
	<context:component-scan base-package="com.intelligence.autodev.controller"/>
	<context:component-scan base-package="com.intelligence.business.price.controller"/>
	
	<!-- AOP注解配置 -->
    <aop:aspectj-autoproxy/>
    
    <!-- 支持异步方法执行
    <task:annotation-driven /> --> 
	

    <!-- ②：启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>
        
	<!-- 详细的注解映射 详情参照annotation-driven.properties
	<annotation-driven>-->
		<!-- 前后端交互数据格式转换
		<message-converters>
			<beans:bean class="org.springframework.http.converter.StringHttpMessageConverter"></beans:bean>
			<beans:bean class="org.springframework.http.converter.FormHttpMessageConverter"></beans:bean>
			<beans:bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"></beans:bean>
			<beans:bean class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter"></beans:bean>
			<beans:bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"></beans:bean>  
            <beans:bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter"></beans:bean>  
            <beans:bean class="org.springframework.http.converter.ResourceHttpMessageConverter"></beans:bean>
            <beans:bean class="org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter"></beans:bean>
		</message-converters>
		<return-value-handlers>   
           <beans:bean  class="com.tuniu.nfbird.web.method.returnval.ResponseJsonMethodProcessor">
           		<beans:property name="messageConverter" ref="jsonMessageConverter"/>
           		<beans:property name="beanWrappers">
           			<beans:list>
           				<beans:bean class="com.tuniu.nfbird.web.method.returnval.impl.ListWrapper" />
           				<beans:bean class="com.tuniu.nfbird.web.method.returnval.impl.DefaultBeanWrapper" />
           			</beans:list>
           		</beans:property>
           		<beans:property name="beanTranslateProcessor">
           			<beans:bean class="com.tuniu.nfbird.core.bean.translate.BeanTranslateProcessor" />
           		</beans:property>
           </beans:bean>   
    	</return-value-handlers>
		<argument-resolvers>
			<beans:bean class="com.tuniu.nfbird.web.argument.JsonMapperArgumentResolver" />
			<beans:bean class="com.tuniu.nfbird.web.argument.PaginationArgumentResolver"/>
		</argument-resolvers>
	</annotation-driven> -->
	

	<!-- 视图解释类 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" /><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
	</bean>

	<!-- 拦截器  总拦截器，拦截所有url
	<mvc:interceptors>
		<bean class="com.core.mvc.MyInteceptor" /> -->
		<!-- <mvc:interceptor>    
        	<mvc:mapping path="/user/*" /> /user/*  -->    
        	<!-- <bean class="com.mvc.MyInteceptor"></bean>    
    	</mvc:interceptor>
	</mvc:interceptors>  -->

	<!-- 对静态资源文件的访问 方案一 （二选一）
	<mvc:default-servlet-handler /> -->

	<!-- 对静态资源文件的访问 方案二 （二选一）
	<mvc:resources mapping="/images/**" location="/images/"
		cache-period="31556926" />
	<mvc:resources mapping="/js/**" location="/js/"
		cache-period="31556926" />
	<mvc:resources mapping="/css/**" location="/css/"
		cache-period="31556926" /> -->
		
	
    <!-- 总错误处理  
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
        <property name="defaultErrorView">    
            <value>/error/error</value>  
        </property>  
        <property name="defaultStatusCode">    
            <value>500</value>  
        </property>     
    <property name="warnLogCategory">    
            <value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver</value>  
        </property>     
    </bean>    -->

</beans>   