package com.intelligence.business.product.service.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.intelligence.business.product.dao.IProductTypeDao;
import com.intelligence.business.product.entity.ProductType;
import com.intelligence.business.product.service.IProductTypeService;
import com.intelligence.common.exception.PowerException;

@Service
public class ProductTypeServiceImpl implements IProductTypeService {

    /**
     * 记录日志
     */
    public final static Logger logger = LoggerFactory
	    .getLogger(ProductTypeServiceImpl.class);

    /**
     * 商品品类DAO层
     */
    @Resource
    private IProductTypeDao iProductTypeDao;

    /**
     * 新增一条商品品类信息
     */
    public Integer addProductType(HashMap<String, Object> params)
	    throws PowerException {
	try {
	    // 获取时间
	    Date currentTime = new Date();
	    params.put("addTime", currentTime);
	    String productType = null;
	    
	    //拆分父类productType
	    Map<String,String> productTypeSplitMap = this.splitProductType(Integer.valueOf(params.get("parentId").toString()));
	    //获取父类分类层级
	    Integer productTypeLevel = Integer.valueOf(productTypeSplitMap.get("productTypeLevel"));
	    //根据父类对应下级子类集合元素数量获取分类Id
	    String childId = (this.getTypeChild(Integer.valueOf(params.get("parentId").toString())).size() + 1)+"";
	    //补齐三位id
	    for(int i=0,j=childId.length();i<3-j;i++){
		childId = "0"+childId;
	    }
	    
	    if(0 == productTypeLevel){
		//0根级
		productType = childId.toString() + "000000"; 
	    }else if (1 == productTypeLevel){
		//一级分类
		productType = productTypeSplitMap.get("strFir")+childId + "000"; 
	    }else if (2 == productTypeLevel){
		//二级分类
		productType = productTypeSplitMap.get("strFir")+productTypeSplitMap.get("strSec")+childId; 
	    }else{
		//三级分类
		return null;
	    }
	    params.put("productType",productType);
	    params.put("productTypeLevel", productTypeLevel+1);
	    params.remove("parentId");
	    return iProductTypeDao.addProductType(params);
	} catch (PowerException e) {
	    throw e;
	}

    }

    /**
     * 更新商品分类表信息
     */
    @Override
    public Integer updateProductType(HashMap<String, Object> params)
	    throws PowerException {
	// TODO Auto-generated method stub
	try {
	    // 若入参不含任何改动，返回0
	    if (1 >= params.size()) {
		return 0;
	    } else {
		return iProductTypeDao.updateProductType(params);
	    }
	} catch (PowerException e) {
	    throw e;
	}

    }

    /**
     * 根据品类id查询指定品类下级品类合集
     */
    @Override
    public List<ProductType> getTypeChild(int productType) throws PowerException {
	try {
	    String startId = null;
	    String endId = null;
	    String searchCondition = null;
	    Map<String,String> typeSplitMap = this.splitProductType(productType);
	    int productTypeLevel = Integer.valueOf(typeSplitMap.get("productTypeLevel").toString());
	    if (0 == productTypeLevel) {
		//根品类入参0，查询所有一级分类集合
		startId = "001000000";
		endId = "999000000";
		searchCondition = "%000000";
	    }else{
	    String strSec = typeSplitMap.get("strSec").toString();
	    String strFir = typeSplitMap.get("strFir").toString();
	    if (3 == productTypeLevel) {
		// 三级品类无子类
		return null;
	    } else if(2 == productTypeLevel){
		// 二级品类
		startId = strFir + strSec+"001";
		endId = strFir + strSec + "999";
		searchCondition = "%";
	    }else {
		// 一级品类
		startId = strFir + "001000";
		endId = strFir + "999000";
		searchCondition = "%000";
	    }
	    }
	    return iProductTypeDao.getProductTypeChild(startId, endId,searchCondition);
	} catch (PowerException e) {
	    throw e;
	}
    }

    /**
     * 根据品类编号查询指定品类上级品类信息
     */
    @Override
    public ProductType getTypeParent(int productType) throws PowerException {
	try {
	    String parentId = null;
	    Map<String,String>  typeSplitMap = this.splitProductType(productType);
	    Integer productTypeLevel = Integer.valueOf(typeSplitMap.get("productTypeLevel"));
	    //根级品类无父类
	    if (0 == productTypeLevel) {
		return null;
	    }else{
	    //拆分categoryId
	    String strSec = typeSplitMap.get("strSec");
	    String strFir = typeSplitMap.get("strFir");
	    if (1 == productTypeLevel) {
		// 一级品类父分类为根级
		parentId = "0";
	    } else if (2 == productTypeLevel) {
		// 二级品类父类为一级
		parentId = strFir + "000000";
	    } else {
		// 三级品类父类为二级
		parentId = strFir + strSec + "000";
	    }
	    }
	    return iProductTypeDao.getProductType(Integer
		    .parseInt(parentId));
	} catch (PowerException e) {
	    throw e;
	}
    }
    
    /**
     * 拆分productType
     * @param productType
     * @return
     */
    public Map<String, String> splitProductType(int productType) {
	// 拆分productType
	Map<String,String> returnMap = new HashMap<String,String>();
	int productTypeLevel = 0;
	if(0 == productType){
	    returnMap.put("productTypeLevel", productTypeLevel+"");
	    return returnMap;
	}
	String productTypeString = productType + "";
	String strThr = productTypeString
		.substring(productTypeString.length() - 3);
	String strSec = productTypeString.substring(
		productTypeString.length() - 6, productTypeString.length() - 3);
	String strFir = productTypeString.substring(0,
		productTypeString.length() - 6);
	
	returnMap.put("strThr", strThr);
	returnMap.put("strSec", strSec);
	returnMap.put("strFir", strFir);
	if ("000".equals(strThr) & "000".equals(strSec)) {
		// 一级品类
	    	productTypeLevel=1;
	    } else if ("000".equals(strThr) & !"000".equals(strSec)) {
		// 二级品类
		productTypeLevel=2;
	    } else if (!"000".equals(strSec) & !"000".equals(strThr)) {
		// 三级品类
		productTypeLevel=3;
	    }
	returnMap.put("productTypeLevel", productTypeLevel+"");
	return returnMap;
    }
    
}
