#JAVA连接MySQL数据库，在操作值为0的timestamp类型时不能正确的处理，而是默认抛出一个异常，就是所见的：java.sql.SQLException: Cannot convert value '0000-00-00 00:00:00' from column 7 to TIMESTAMP。这一问题在官方文档中有详细说明，详见如下链接：
#http://bugs.mysql.com/bug.php?id=19274
#http://dev.mysql.com/doc/refman/5.5/en/connector-j-installing-upgrading.html
#在JDBC连接串中有一项属性：zeroDateTimeBehavior,可以用来配置出现这种情况时的处理策略，该属性有下列三个属性值：
#exception：默认值，即抛出SQL state [S1009]. Cannot convert value....的异常；
#convertToNull：将日期转换成NULL值；
#round：替换成最近的日期即0001-01-01；
#因此对于这类异常，可以考虑通过修改连接串，附加zeroDateTimeBehavior=convertToNull属性的方式予以规避，例如：
#jdbc:mysql://localhost:3306/mydbname?zeroDateTimeBehavior=convertToNull
#从另一个层面讲，这类异常的触发也与timestamp赋值的操作有关，如果能够在设计阶段和记录写入阶段做好逻辑判断，避免写入 '0000-00-00 00:00:00'这类值，那么也可以避免出现 Cannot convert value '0000-00-00 00:00:00' from column N to TIMESTAMP的错 误。
jdbc.driverClass=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://127.0.0.1:3306/h_pp?&useUnicode=true&zeroDateTimeBehavior=convertToNull&characterEncoding=UTF-8
#jdbc.url=jdbc:mysql://127.0.0.1:3306/intelligence?&useUnicode=true&zeroDateTimeBehavior=convertToNull&characterEncoding=UTF-8
jdbc.user=root
jdbc.password=123456
#jdbc.url=jdbc:mysql://115.29.170.45:3306/h_pp?&useUnicode=true&zeroDateTimeBehavior=convertToNull&characterEncoding=UTF-8
#jdbc.user=root
#jdbc.password=HM123456
#jdbc.url=jdbc:mysql://115.29.170.45:3306/h_pp?&useUnicode=true&zeroDateTimeBehavior=convertToNull&characterEncoding=UTF-8
#jdbc.user=root
#jdbc.password=HM123456
#连接池中保留的最大连接数
jdbc.maxPoolSize=100
#连接池中保留的最小连接数
jdbc.minPoolSize=10
#初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间
jdbc.initialPoolSize=20
#最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃
jdbc.maxIdleTime=60
#当连接池中的连接耗尽的时候c3p0一次同时获取的连接数
jdbc.acquireIncrement=5
#JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭
jdbc.maxStatements=100
#每60秒检查所有连接池中的空闲连接
jdbc.idleConnectionTestPeriod=60
#定义在从数据库获取新连接失败后重复尝试的次数
jdbc.acquireRetryAttempts=0
#获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 获取连接失败后该数据源将申明已断开并永久关闭
jdbc.breakAfterAcquireFailure=true
#因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 等方法来提升连接测试的性能
jdbc.testConnectionOnCheckout=false